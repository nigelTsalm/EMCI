Class util.AppInstaller
{

Parameter Namespace = "ANMS";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Log Text="Creating namespace ${Namespace}" Level="0"/>
 <Namespace Name="${Namespace}" Create="yes" Code="${Namespace}-APP" Ensemble="" Data="USER">
  <Configuration>
   <Database Name="${Namespace}-APP" Dir="/opt/app/db/app" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/>
  </Configuration>
  <CSPApplication  Url="/rest" Directory="/usr/irissys/mgr/web" AuthenticationMethods="64" IsNamespaceDefault="false" Grant="%ALL" Recurse="1" DispatchClass="util.RestRouter" />
  <CSPApplication  Url="/" Directory="/opt/app/web/angular-ngrx-material-starter" AuthenticationMethods="64" IsNamespaceDefault="false" Grant="%ALL" Recurse="1" />
  <Import File="/tmp/src" Recurse="1" Flags="cuk" />
  <Invoke Class="book.Book" Method="ResetDemo" />
 </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
/// Main setup method
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
     Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Entry point
ClassMethod Run() As %Status
{
    try {
        write "START INSTALLER",!
        set vars("Namespace") = ..#Namespace
        set sc = ..RunManifest(.vars)
        write !,$System.Status.GetErrorText(sc),!
        if sc write !,"INSTALLER SUCCESS",!
        else  do $SYSTEM.Process.Terminate($JOB,1)
        zn "%SYS"
        set p("DispatchClass")="util.RestRouter"
        set sc = ##class(Security.Applications).Modify("/rest", .p)
        if sc write !,"REST DISPATCH SUCCESS",!
        else  do $SYSTEM.Process.Terminate($JOB,1)
    } catch ex {
        set sc = ex.AsStatus()
        write $System.Status.GetErrorText(sc),!
        do $SYSTEM.Process.Terminate($JOB,1)
    }
    quit sc
}

}
